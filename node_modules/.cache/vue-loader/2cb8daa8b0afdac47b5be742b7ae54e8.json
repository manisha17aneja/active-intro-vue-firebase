{"remainingRequest":"/var/www/html/active-intro/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/var/www/html/active-intro/node_modules/cache-loader/dist/cjs.js??ref--0-0!/var/www/html/active-intro/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/html/active-intro/src/components/Subscription.vue?vue&type=template&id=38f216cd&","dependencies":[{"path":"/var/www/html/active-intro/src/components/Subscription.vue","mtime":1621236026945},{"path":"/var/www/html/active-intro/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/active-intro/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/var/www/html/active-intro/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/active-intro/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}