{"remainingRequest":"/var/www/html/firebase-auth/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/html/firebase-auth/src/components/items/Create.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/var/www/html/firebase-auth/src/components/items/Create.vue","mtime":1617879597488},{"path":"/var/www/html/firebase-auth/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/firebase-auth/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/var/www/html/firebase-auth/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/var/www/html/firebase-auth/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/firebase-auth/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCmltcG9ydCAnQGRldmVvZGsvdnVlLXRvYXN0ci9kaXN0L0BkZXZlb2RrL3Z1ZS10b2FzdHIuY3NzJwo="},{"version":3,"sources":["Create.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA","file":"Create.vue","sourceRoot":"src/components/items","sourcesContent":["// Create.vue\n\n<template>\n  <div class=\"container\">\n        <div class=\"card\">\n            <div class=\"card-header\">\n                <h3>Add Item</h3>\n            </div>\n            <div class=\"card-body\">\n                <form v-on:submit.prevent=\"submit\">\n                    <div class=\"form-group\">\n                        <label>Item Name:</label>\n                       \n                        <input type=\"text\" v-model.trim=\"$v.name.$model\" :class=\"{'is-invalid': validationStatus($v.name)}\" class=\"form-control form-control-lg\">\n                        <div v-if=\"!$v.name.required\" class=\"invalid-feedback\">The name field is required.</div>\n\n                    </div>\n                    <div class=\"form-group\">\n                        <label>Item Price:</label>\n                        <input type=\"text\" v-model.trim=\"$v.price.$model\" :class=\"{'is-invalid': validationStatus($v.price)}\" class=\"form-control form-control-lg\">\n                <div v-if=\"!$v.price.required\" class=\"invalid-feedback\">The price field is required.</div>\n                <div v-if=\"!$v.price.minLength\" class=\"invalid-feedback\">You must have at least {{ $v.price.$params.minLength.min }} letters.</div>\n                <div v-if=\"!$v.price.maxLength\" class=\"invalid-feedback\">You must not have greater then {{ $v.price.$params.maxLength.min }} letters.</div>\n            \n                    </div>\n                    <div class=\"form-group\">\n                        <input type=\"submit\" class=\"btn btn-primary\" value=\"Add Item\"/>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n</template>\n<style>\nimport '@deveodk/vue-toastr/dist/@deveodk/vue-toastr.css'\n</style>\n\n<script>\n\n//import 'https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js';\n\n\nimport { required, minLength, maxLength } from 'vuelidate/lib/validators'\nimport Vue from 'vue'\n\nimport VueToastr from '@deveodk/vue-toastr'\n\n\nimport axios from 'axios'\nimport VueAxios from 'vue-axios'\nimport { db } from '../../main'\n\nVue.use(VueToastr)\nVue.use(VueAxios,axios)\n\nexport default {\n    name: 'Create',\n    data: function() {\n        return {\n            name: '', \n            price: ''\n        }\n    }, \n    validations: {\n        name: {required},\n        price: {required, minLength: minLength(3), maxLength: maxLength(8)}\n    },\n\n    methods: {\n\n        validationStatus: function(validation) {\n            return typeof validation != \"undefined\" ? validation.$error : false;\n        },\n\n        submit: function() {\n            Vue.use(VueToastr, {\n                defaultPosition: 'toast-bottom-left',\n                defaultType: 'info',\n                defaultTimeout: 1000\n            })\n            this.$v.$touch();\n            if (this.$v.$pendding || this.$v.$error) return;\n\n           db.collection(\"items\")\n            .add({ name: this.name, price: this.price })\n            .then(() => {\n                console.log(\"Added Successfully!\");\n                //toastr.success('Have fun storming the castle!', 'Miracle Max Says')\n                this.$toastr('success', 'i am a toastr success', 'hello')\n            })\n            .catch((error) => {\n                console.error(\"Error writing document: \", error);\n            }); \n\n            //this.$router\n        }\n    }\n}\n</script>\n\n\n"]}]}